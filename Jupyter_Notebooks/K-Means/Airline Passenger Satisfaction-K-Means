{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ca7d2082",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Python Version is: 3.11.2 | packaged by Anaconda, Inc. | (main, Mar 27 2023, 23:35:04) [MSC v.1916 64 bit (AMD64)]\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "print(\"Python Version is: \" + sys.version)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c98e8666",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import xgboost as xgb\n",
    "import seaborn as sns\n",
    "#sns.set(color_codes = True)\n",
    "#sns.set(style=\"whitegrid\")\n",
    "#sns.set_palette(\"Set3\")\n",
    "\n",
    "# Get multiple outputs in the same cell\n",
    "from IPython.core.interactiveshell import InteractiveShell\n",
    "InteractiveShell.ast_node_interactivity = \"all\"\n",
    "\n",
    "# Ignore all warnings\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "warnings.filterwarnings(action='ignore', category=DeprecationWarning)\n",
    "pd.set_option('display.max_columns', None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bb86198b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# For cluster analysis\n",
    "df = pd.read_csv(\"airline_passenger_satisfaction.csv\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1e667334",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Customer Type</th>\n",
       "      <th>Type of Travel</th>\n",
       "      <th>Class</th>\n",
       "      <th>Flight Distance</th>\n",
       "      <th>Departure Delay</th>\n",
       "      <th>Arrival Delay</th>\n",
       "      <th>Departure and Arrival Time Convenience</th>\n",
       "      <th>Ease of Online Booking</th>\n",
       "      <th>Check-in Service</th>\n",
       "      <th>Online Boarding</th>\n",
       "      <th>Gate Location</th>\n",
       "      <th>On-board Service</th>\n",
       "      <th>Seat Comfort</th>\n",
       "      <th>Leg Room Service</th>\n",
       "      <th>Cleanliness</th>\n",
       "      <th>Food and Drink</th>\n",
       "      <th>In-flight Service</th>\n",
       "      <th>In-flight Wifi Service</th>\n",
       "      <th>In-flight Entertainment</th>\n",
       "      <th>Baggage Handling</th>\n",
       "      <th>Satisfaction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Male</td>\n",
       "      <td>48</td>\n",
       "      <td>First-time</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business</td>\n",
       "      <td>821</td>\n",
       "      <td>2</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>Neutral or Dissatisfied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Female</td>\n",
       "      <td>35</td>\n",
       "      <td>Returning</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business</td>\n",
       "      <td>821</td>\n",
       "      <td>26</td>\n",
       "      <td>39.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>Satisfied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Male</td>\n",
       "      <td>41</td>\n",
       "      <td>Returning</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business</td>\n",
       "      <td>853</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>Satisfied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Male</td>\n",
       "      <td>50</td>\n",
       "      <td>Returning</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business</td>\n",
       "      <td>1905</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>Satisfied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Female</td>\n",
       "      <td>49</td>\n",
       "      <td>Returning</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business</td>\n",
       "      <td>3470</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>Satisfied</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID  Gender  Age Customer Type Type of Travel     Class  Flight Distance  \\\n",
       "0   1    Male   48    First-time       Business  Business              821   \n",
       "1   2  Female   35     Returning       Business  Business              821   \n",
       "2   3    Male   41     Returning       Business  Business              853   \n",
       "3   4    Male   50     Returning       Business  Business             1905   \n",
       "4   5  Female   49     Returning       Business  Business             3470   \n",
       "\n",
       "   Departure Delay  Arrival Delay  Departure and Arrival Time Convenience  \\\n",
       "0                2            5.0                                       3   \n",
       "1               26           39.0                                       2   \n",
       "2                0            0.0                                       4   \n",
       "3                0            0.0                                       2   \n",
       "4                0            1.0                                       3   \n",
       "\n",
       "   Ease of Online Booking  Check-in Service  Online Boarding  Gate Location  \\\n",
       "0                       3                 4                3              3   \n",
       "1                       2                 3                5              2   \n",
       "2                       4                 4                5              4   \n",
       "3                       2                 3                4              2   \n",
       "4                       3                 3                5              3   \n",
       "\n",
       "   On-board Service  Seat Comfort  Leg Room Service  Cleanliness  \\\n",
       "0                 3             5                 2            5   \n",
       "1                 5             4                 5            5   \n",
       "2                 3             5                 3            5   \n",
       "3                 5             5                 5            4   \n",
       "4                 3             4                 4            5   \n",
       "\n",
       "   Food and Drink  In-flight Service  In-flight Wifi Service  \\\n",
       "0               5                  5                       3   \n",
       "1               3                  5                       2   \n",
       "2               5                  3                       4   \n",
       "3               4                  5                       2   \n",
       "4               4                  3                       3   \n",
       "\n",
       "   In-flight Entertainment  Baggage Handling             Satisfaction  \n",
       "0                        5                 5  Neutral or Dissatisfied  \n",
       "1                        5                 5                Satisfied  \n",
       "2                        3                 3                Satisfied  \n",
       "3                        5                 5                Satisfied  \n",
       "4                        3                 3                Satisfied  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d68eb1c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 129880 entries, 0 to 129879\n",
      "Data columns (total 24 columns):\n",
      " #   Column                                  Non-Null Count   Dtype  \n",
      "---  ------                                  --------------   -----  \n",
      " 0   ID                                      129880 non-null  int64  \n",
      " 1   Gender                                  129880 non-null  object \n",
      " 2   Age                                     129880 non-null  int64  \n",
      " 3   Customer Type                           129880 non-null  object \n",
      " 4   Type of Travel                          129880 non-null  object \n",
      " 5   Class                                   129880 non-null  object \n",
      " 6   Flight Distance                         129880 non-null  int64  \n",
      " 7   Departure Delay                         129880 non-null  int64  \n",
      " 8   Arrival Delay                           129487 non-null  float64\n",
      " 9   Departure and Arrival Time Convenience  129880 non-null  int64  \n",
      " 10  Ease of Online Booking                  129880 non-null  int64  \n",
      " 11  Check-in Service                        129880 non-null  int64  \n",
      " 12  Online Boarding                         129880 non-null  int64  \n",
      " 13  Gate Location                           129880 non-null  int64  \n",
      " 14  On-board Service                        129880 non-null  int64  \n",
      " 15  Seat Comfort                            129880 non-null  int64  \n",
      " 16  Leg Room Service                        129880 non-null  int64  \n",
      " 17  Cleanliness                             129880 non-null  int64  \n",
      " 18  Food and Drink                          129880 non-null  int64  \n",
      " 19  In-flight Service                       129880 non-null  int64  \n",
      " 20  In-flight Wifi Service                  129880 non-null  int64  \n",
      " 21  In-flight Entertainment                 129880 non-null  int64  \n",
      " 22  Baggage Handling                        129880 non-null  int64  \n",
      " 23  Satisfaction                            129880 non-null  object \n",
      "dtypes: float64(1), int64(18), object(5)\n",
      "memory usage: 23.8+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d8676480",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ID                                          0\n",
       "Gender                                      0\n",
       "Age                                         0\n",
       "Customer Type                               0\n",
       "Type of Travel                              0\n",
       "Class                                       0\n",
       "Flight Distance                             0\n",
       "Departure Delay                             0\n",
       "Arrival Delay                             393\n",
       "Departure and Arrival Time Convenience      0\n",
       "Ease of Online Booking                      0\n",
       "Check-in Service                            0\n",
       "Online Boarding                             0\n",
       "Gate Location                               0\n",
       "On-board Service                            0\n",
       "Seat Comfort                                0\n",
       "Leg Room Service                            0\n",
       "Cleanliness                                 0\n",
       "Food and Drink                              0\n",
       "In-flight Service                           0\n",
       "In-flight Wifi Service                      0\n",
       "In-flight Entertainment                     0\n",
       "Baggage Handling                            0\n",
       "Satisfaction                                0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7114f9cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "129880"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# all flyers are unique and didn't fly more than once in this survey\n",
    "df['ID'].nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71054811",
   "metadata": {},
   "source": [
    "### Applying One-Hot Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "fd8a62a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Neutral or Dissatisfied    73452\n",
       "Satisfied                  56428\n",
       "Name: Satisfaction, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Satisfaction'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a710c780",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Business        62160\n",
       "Economy         58309\n",
       "Economy Plus     9411\n",
       "Name: Class, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Class'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d097b810",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Business    89693\n",
       "Personal    40187\n",
       "Name: Type of Travel, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Type of Travel'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "00edc4ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Returning     106100\n",
       "First-time     23780\n",
       "Name: Customer Type, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Customer Type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "81c81748",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Female    65899\n",
       "Male      63981\n",
       "Name: Gender, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Gender'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "873775ef",
   "metadata": {},
   "source": [
    "### Perform linear interpolation to fill missing values with estimates based on the surrounding non-null values.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "123b4e1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Arrival Delay'].interpolate(method='linear', inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1666bc3e",
   "metadata": {},
   "source": [
    "### Creating a copy of the dataframe to append to at the end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1850074e",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2=df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0e7f4a11",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Customer Type</th>\n",
       "      <th>Type of Travel</th>\n",
       "      <th>Class</th>\n",
       "      <th>Flight Distance</th>\n",
       "      <th>Departure Delay</th>\n",
       "      <th>Arrival Delay</th>\n",
       "      <th>Departure and Arrival Time Convenience</th>\n",
       "      <th>Ease of Online Booking</th>\n",
       "      <th>Check-in Service</th>\n",
       "      <th>Online Boarding</th>\n",
       "      <th>Gate Location</th>\n",
       "      <th>On-board Service</th>\n",
       "      <th>Seat Comfort</th>\n",
       "      <th>Leg Room Service</th>\n",
       "      <th>Cleanliness</th>\n",
       "      <th>Food and Drink</th>\n",
       "      <th>In-flight Service</th>\n",
       "      <th>In-flight Wifi Service</th>\n",
       "      <th>In-flight Entertainment</th>\n",
       "      <th>Baggage Handling</th>\n",
       "      <th>Satisfaction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Male</td>\n",
       "      <td>48</td>\n",
       "      <td>First-time</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business</td>\n",
       "      <td>821</td>\n",
       "      <td>2</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>Neutral or Dissatisfied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Female</td>\n",
       "      <td>35</td>\n",
       "      <td>Returning</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business</td>\n",
       "      <td>821</td>\n",
       "      <td>26</td>\n",
       "      <td>39.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>Satisfied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Male</td>\n",
       "      <td>41</td>\n",
       "      <td>Returning</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business</td>\n",
       "      <td>853</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>Satisfied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Male</td>\n",
       "      <td>50</td>\n",
       "      <td>Returning</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business</td>\n",
       "      <td>1905</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>Satisfied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Female</td>\n",
       "      <td>49</td>\n",
       "      <td>Returning</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business</td>\n",
       "      <td>3470</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>Satisfied</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID  Gender  Age Customer Type Type of Travel     Class  Flight Distance  \\\n",
       "0   1    Male   48    First-time       Business  Business              821   \n",
       "1   2  Female   35     Returning       Business  Business              821   \n",
       "2   3    Male   41     Returning       Business  Business              853   \n",
       "3   4    Male   50     Returning       Business  Business             1905   \n",
       "4   5  Female   49     Returning       Business  Business             3470   \n",
       "\n",
       "   Departure Delay  Arrival Delay  Departure and Arrival Time Convenience  \\\n",
       "0                2            5.0                                       3   \n",
       "1               26           39.0                                       2   \n",
       "2                0            0.0                                       4   \n",
       "3                0            0.0                                       2   \n",
       "4                0            1.0                                       3   \n",
       "\n",
       "   Ease of Online Booking  Check-in Service  Online Boarding  Gate Location  \\\n",
       "0                       3                 4                3              3   \n",
       "1                       2                 3                5              2   \n",
       "2                       4                 4                5              4   \n",
       "3                       2                 3                4              2   \n",
       "4                       3                 3                5              3   \n",
       "\n",
       "   On-board Service  Seat Comfort  Leg Room Service  Cleanliness  \\\n",
       "0                 3             5                 2            5   \n",
       "1                 5             4                 5            5   \n",
       "2                 3             5                 3            5   \n",
       "3                 5             5                 5            4   \n",
       "4                 3             4                 4            5   \n",
       "\n",
       "   Food and Drink  In-flight Service  In-flight Wifi Service  \\\n",
       "0               5                  5                       3   \n",
       "1               3                  5                       2   \n",
       "2               5                  3                       4   \n",
       "3               4                  5                       2   \n",
       "4               4                  3                       3   \n",
       "\n",
       "   In-flight Entertainment  Baggage Handling             Satisfaction  \n",
       "0                        5                 5  Neutral or Dissatisfied  \n",
       "1                        5                 5                Satisfied  \n",
       "2                        3                 3                Satisfied  \n",
       "3                        5                 5                Satisfied  \n",
       "4                        3                 3                Satisfied  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fc2e7bd",
   "metadata": {},
   "source": [
    "### One Hot Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "26b7e294",
   "metadata": {},
   "outputs": [],
   "source": [
    "columns_to_encode = ['Gender', 'Customer Type', 'Type of Travel', 'Class', 'Satisfaction']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a47ce11b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Perform one-hot encoding\n",
    "df_encoded = pd.get_dummies(df, columns=columns_to_encode)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "db91fa6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df=df_encoded"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29e12483",
   "metadata": {},
   "source": [
    "### Data Normalization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "10304158",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Normalizing \n",
    "#columns_to_normalize = ['Flight Distance', 'Departure Delay', 'Arrival Delay','Age']#columns_to_normalize = ['Flight Distance', 'Departure Delay', 'Arrival Delay','Age']\n",
    "\n",
    "columns_to_normalize = df.columns[1:5] #first 4 columns after the ID column\n",
    "\n",
    "# Initialize the StandardScaler\n",
    "scaler = StandardScaler()\n",
    "\n",
    "# Fit and transform the selected columns\n",
    "df[columns_to_normalize] = scaler.fit_transform(df[columns_to_normalize])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1c3bf44",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "f855382b",
   "metadata": {},
   "source": [
    "The negative values after normalizing using the StandardScaler are expected because this scaler performs standardization, which transforms the data to have a mean of zero and a standard deviation of one. The resulting values can be both positive and negative, depending on their original distribution.\n",
    "\n",
    "The purpose of standardization is to scale the data to a standard normal distribution, where the mean is centered at zero and the standard deviation is 1. This normalization technique helps in cases where the absolute values or magnitudes of the features are not as important as their relative positions or distributions.\n",
    "\n",
    "Negative values in the normalized data indicate that the original values were below the mean, while positive values indicate values above the mean. The magnitude of the values represents the number of standard deviations away from the mean."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af82cc3a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "0dd82750",
   "metadata": {},
   "source": [
    "Why normalize age\n",
    "\n",
    "Scale of the variable: Consider the scale of the \"age\" variable relative to other features in your dataset. If \"age\" is on a significantly different scale than other variables, normalization may help ensure that it is not disproportionately influencing the analysis or machine learning model due to its larger magnitude."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9753836d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Flight Distance</th>\n",
       "      <th>Departure Delay</th>\n",
       "      <th>Arrival Delay</th>\n",
       "      <th>Departure and Arrival Time Convenience</th>\n",
       "      <th>Ease of Online Booking</th>\n",
       "      <th>Check-in Service</th>\n",
       "      <th>Online Boarding</th>\n",
       "      <th>Gate Location</th>\n",
       "      <th>On-board Service</th>\n",
       "      <th>Seat Comfort</th>\n",
       "      <th>Leg Room Service</th>\n",
       "      <th>Cleanliness</th>\n",
       "      <th>Food and Drink</th>\n",
       "      <th>In-flight Service</th>\n",
       "      <th>In-flight Wifi Service</th>\n",
       "      <th>In-flight Entertainment</th>\n",
       "      <th>Baggage Handling</th>\n",
       "      <th>Gender_Female</th>\n",
       "      <th>Gender_Male</th>\n",
       "      <th>Customer Type_First-time</th>\n",
       "      <th>Customer Type_Returning</th>\n",
       "      <th>Type of Travel_Business</th>\n",
       "      <th>Type of Travel_Personal</th>\n",
       "      <th>Class_Business</th>\n",
       "      <th>Class_Economy</th>\n",
       "      <th>Class_Economy Plus</th>\n",
       "      <th>Satisfaction_Neutral or Dissatisfied</th>\n",
       "      <th>Satisfaction_Satisfied</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.566960</td>\n",
       "      <td>-0.370261</td>\n",
       "      <td>-0.333948</td>\n",
       "      <td>-0.262578</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>-0.292868</td>\n",
       "      <td>-0.370261</td>\n",
       "      <td>0.296454</td>\n",
       "      <td>0.622108</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.103976</td>\n",
       "      <td>-0.338179</td>\n",
       "      <td>-0.386481</td>\n",
       "      <td>-0.392678</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0.699242</td>\n",
       "      <td>0.716512</td>\n",
       "      <td>-0.386481</td>\n",
       "      <td>-0.392678</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.633101</td>\n",
       "      <td>2.285515</td>\n",
       "      <td>-0.386481</td>\n",
       "      <td>-0.366658</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID       Age  Flight Distance  Departure Delay  Arrival Delay  \\\n",
       "0   1  0.566960        -0.370261        -0.333948      -0.262578   \n",
       "1   2 -0.292868        -0.370261         0.296454       0.622108   \n",
       "2   3  0.103976        -0.338179        -0.386481      -0.392678   \n",
       "3   4  0.699242         0.716512        -0.386481      -0.392678   \n",
       "4   5  0.633101         2.285515        -0.386481      -0.366658   \n",
       "\n",
       "   Departure and Arrival Time Convenience  Ease of Online Booking  \\\n",
       "0                                       3                       3   \n",
       "1                                       2                       2   \n",
       "2                                       4                       4   \n",
       "3                                       2                       2   \n",
       "4                                       3                       3   \n",
       "\n",
       "   Check-in Service  Online Boarding  Gate Location  On-board Service  \\\n",
       "0                 4                3              3                 3   \n",
       "1                 3                5              2                 5   \n",
       "2                 4                5              4                 3   \n",
       "3                 3                4              2                 5   \n",
       "4                 3                5              3                 3   \n",
       "\n",
       "   Seat Comfort  Leg Room Service  Cleanliness  Food and Drink  \\\n",
       "0             5                 2            5               5   \n",
       "1             4                 5            5               3   \n",
       "2             5                 3            5               5   \n",
       "3             5                 5            4               4   \n",
       "4             4                 4            5               4   \n",
       "\n",
       "   In-flight Service  In-flight Wifi Service  In-flight Entertainment  \\\n",
       "0                  5                       3                        5   \n",
       "1                  5                       2                        5   \n",
       "2                  3                       4                        3   \n",
       "3                  5                       2                        5   \n",
       "4                  3                       3                        3   \n",
       "\n",
       "   Baggage Handling  Gender_Female  Gender_Male  Customer Type_First-time  \\\n",
       "0                 5              0            1                         1   \n",
       "1                 5              1            0                         0   \n",
       "2                 3              0            1                         0   \n",
       "3                 5              0            1                         0   \n",
       "4                 3              1            0                         0   \n",
       "\n",
       "   Customer Type_Returning  Type of Travel_Business  Type of Travel_Personal  \\\n",
       "0                        0                        1                        0   \n",
       "1                        1                        1                        0   \n",
       "2                        1                        1                        0   \n",
       "3                        1                        1                        0   \n",
       "4                        1                        1                        0   \n",
       "\n",
       "   Class_Business  Class_Economy  Class_Economy Plus  \\\n",
       "0               1              0                   0   \n",
       "1               1              0                   0   \n",
       "2               1              0                   0   \n",
       "3               1              0                   0   \n",
       "4               1              0                   0   \n",
       "\n",
       "   Satisfaction_Neutral or Dissatisfied  Satisfaction_Satisfied  \n",
       "0                                     1                       0  \n",
       "1                                     0                       1  \n",
       "2                                     0                       1  \n",
       "3                                     0                       1  \n",
       "4                                     0                       1  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dab28f0f",
   "metadata": {},
   "source": [
    "### Dropping the ID column before running the K-means clustering to eliminate irrelevant information, reduce dimensionality, improve interpretability, and address data privacy concerns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e42eb281",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Flight Distance</th>\n",
       "      <th>Departure Delay</th>\n",
       "      <th>Arrival Delay</th>\n",
       "      <th>Departure and Arrival Time Convenience</th>\n",
       "      <th>Ease of Online Booking</th>\n",
       "      <th>Check-in Service</th>\n",
       "      <th>Online Boarding</th>\n",
       "      <th>Gate Location</th>\n",
       "      <th>On-board Service</th>\n",
       "      <th>Seat Comfort</th>\n",
       "      <th>Leg Room Service</th>\n",
       "      <th>Cleanliness</th>\n",
       "      <th>Food and Drink</th>\n",
       "      <th>In-flight Service</th>\n",
       "      <th>In-flight Wifi Service</th>\n",
       "      <th>In-flight Entertainment</th>\n",
       "      <th>Baggage Handling</th>\n",
       "      <th>Gender_Female</th>\n",
       "      <th>Gender_Male</th>\n",
       "      <th>Customer Type_First-time</th>\n",
       "      <th>Customer Type_Returning</th>\n",
       "      <th>Type of Travel_Business</th>\n",
       "      <th>Type of Travel_Personal</th>\n",
       "      <th>Class_Business</th>\n",
       "      <th>Class_Economy</th>\n",
       "      <th>Class_Economy Plus</th>\n",
       "      <th>Satisfaction_Neutral or Dissatisfied</th>\n",
       "      <th>Satisfaction_Satisfied</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.566960</td>\n",
       "      <td>-0.370261</td>\n",
       "      <td>-0.333948</td>\n",
       "      <td>-0.262578</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.292868</td>\n",
       "      <td>-0.370261</td>\n",
       "      <td>0.296454</td>\n",
       "      <td>0.622108</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.103976</td>\n",
       "      <td>-0.338179</td>\n",
       "      <td>-0.386481</td>\n",
       "      <td>-0.392678</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.699242</td>\n",
       "      <td>0.716512</td>\n",
       "      <td>-0.386481</td>\n",
       "      <td>-0.392678</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.633101</td>\n",
       "      <td>2.285515</td>\n",
       "      <td>-0.386481</td>\n",
       "      <td>-0.366658</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Age  Flight Distance  Departure Delay  Arrival Delay  \\\n",
       "0  0.566960        -0.370261        -0.333948      -0.262578   \n",
       "1 -0.292868        -0.370261         0.296454       0.622108   \n",
       "2  0.103976        -0.338179        -0.386481      -0.392678   \n",
       "3  0.699242         0.716512        -0.386481      -0.392678   \n",
       "4  0.633101         2.285515        -0.386481      -0.366658   \n",
       "\n",
       "   Departure and Arrival Time Convenience  Ease of Online Booking  \\\n",
       "0                                       3                       3   \n",
       "1                                       2                       2   \n",
       "2                                       4                       4   \n",
       "3                                       2                       2   \n",
       "4                                       3                       3   \n",
       "\n",
       "   Check-in Service  Online Boarding  Gate Location  On-board Service  \\\n",
       "0                 4                3              3                 3   \n",
       "1                 3                5              2                 5   \n",
       "2                 4                5              4                 3   \n",
       "3                 3                4              2                 5   \n",
       "4                 3                5              3                 3   \n",
       "\n",
       "   Seat Comfort  Leg Room Service  Cleanliness  Food and Drink  \\\n",
       "0             5                 2            5               5   \n",
       "1             4                 5            5               3   \n",
       "2             5                 3            5               5   \n",
       "3             5                 5            4               4   \n",
       "4             4                 4            5               4   \n",
       "\n",
       "   In-flight Service  In-flight Wifi Service  In-flight Entertainment  \\\n",
       "0                  5                       3                        5   \n",
       "1                  5                       2                        5   \n",
       "2                  3                       4                        3   \n",
       "3                  5                       2                        5   \n",
       "4                  3                       3                        3   \n",
       "\n",
       "   Baggage Handling  Gender_Female  Gender_Male  Customer Type_First-time  \\\n",
       "0                 5              0            1                         1   \n",
       "1                 5              1            0                         0   \n",
       "2                 3              0            1                         0   \n",
       "3                 5              0            1                         0   \n",
       "4                 3              1            0                         0   \n",
       "\n",
       "   Customer Type_Returning  Type of Travel_Business  Type of Travel_Personal  \\\n",
       "0                        0                        1                        0   \n",
       "1                        1                        1                        0   \n",
       "2                        1                        1                        0   \n",
       "3                        1                        1                        0   \n",
       "4                        1                        1                        0   \n",
       "\n",
       "   Class_Business  Class_Economy  Class_Economy Plus  \\\n",
       "0               1              0                   0   \n",
       "1               1              0                   0   \n",
       "2               1              0                   0   \n",
       "3               1              0                   0   \n",
       "4               1              0                   0   \n",
       "\n",
       "   Satisfaction_Neutral or Dissatisfied  Satisfaction_Satisfied  \n",
       "0                                     1                       0  \n",
       "1                                     0                       1  \n",
       "2                                     0                       1  \n",
       "3                                     0                       1  \n",
       "4                                     0                       1  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_without_id = df.drop('ID', axis=1)\n",
    "df_without_id.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8ab65c9",
   "metadata": {},
   "source": [
    "### Running it through algorithms for clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d76fe21a",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=1, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=1, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=1, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=2, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=2, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=2, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=3, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=3, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=3, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=4, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=4, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=4, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=5, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=5, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=5, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=6, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=6, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=6, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-7 {color: black;background-color: white;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=7, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=7, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=7, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-8 {color: black;background-color: white;}#sk-container-id-8 pre{padding: 0;}#sk-container-id-8 div.sk-toggleable {background-color: white;}#sk-container-id-8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-8 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-8 div.sk-item {position: relative;z-index: 1;}#sk-container-id-8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-8 div.sk-item::before, #sk-container-id-8 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-8 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-8 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-8 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-8 div.sk-label-container {text-align: center;}#sk-container-id-8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-9 {color: black;background-color: white;}#sk-container-id-9 pre{padding: 0;}#sk-container-id-9 div.sk-toggleable {background-color: white;}#sk-container-id-9 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-9 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-9 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-9 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-9 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-9 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-9 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-9 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-9 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-9 div.sk-item {position: relative;z-index: 1;}#sk-container-id-9 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-9 div.sk-item::before, #sk-container-id-9 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-9 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-9 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-9 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-9 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-9 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-9 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-9 div.sk-label-container {text-align: center;}#sk-container-id-9 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-9 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=9, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" checked><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=9, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=9, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-10 {color: black;background-color: white;}#sk-container-id-10 pre{padding: 0;}#sk-container-id-10 div.sk-toggleable {background-color: white;}#sk-container-id-10 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-10 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-10 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-10 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-10 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-10 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-10 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-10 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-10 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-10 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-10 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-10 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-10 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-10 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-10 div.sk-item {position: relative;z-index: 1;}#sk-container-id-10 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-10 div.sk-item::before, #sk-container-id-10 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-10 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-10 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-10 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-10 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-10 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-10 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-10 div.sk-label-container {text-align: center;}#sk-container-id-10 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-10 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-10\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=10, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" checked><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=10, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=10, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-11 {color: black;background-color: white;}#sk-container-id-11 pre{padding: 0;}#sk-container-id-11 div.sk-toggleable {background-color: white;}#sk-container-id-11 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-11 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-11 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-11 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-11 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-11 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-11 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-11 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-11 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-11 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-11 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-11 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-11 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-11 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-11 div.sk-item {position: relative;z-index: 1;}#sk-container-id-11 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-11 div.sk-item::before, #sk-container-id-11 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-11 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-11 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-11 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-11 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-11 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-11 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-11 div.sk-label-container {text-align: center;}#sk-container-id-11 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-11 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-11\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=11, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" checked><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=11, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=11, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-12 {color: black;background-color: white;}#sk-container-id-12 pre{padding: 0;}#sk-container-id-12 div.sk-toggleable {background-color: white;}#sk-container-id-12 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-12 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-12 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-12 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-12 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-12 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-12 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-12 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-12 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-12 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-12 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-12 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-12 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-12 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-12 div.sk-item {position: relative;z-index: 1;}#sk-container-id-12 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-12 div.sk-item::before, #sk-container-id-12 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-12 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-12 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-12 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-12 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-12 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-12 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-12 div.sk-label-container {text-align: center;}#sk-container-id-12 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-12 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-12\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=12, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" checked><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=12, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=12, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-13 {color: black;background-color: white;}#sk-container-id-13 pre{padding: 0;}#sk-container-id-13 div.sk-toggleable {background-color: white;}#sk-container-id-13 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-13 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-13 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-13 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-13 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-13 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-13 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-13 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-13 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-13 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-13 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-13 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-13 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-13 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-13 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-13 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-13 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-13 div.sk-item {position: relative;z-index: 1;}#sk-container-id-13 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-13 div.sk-item::before, #sk-container-id-13 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-13 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-13 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-13 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-13 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-13 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-13 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-13 div.sk-label-container {text-align: center;}#sk-container-id-13 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-13 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-13\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=13, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" checked><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=13, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=13, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-14 {color: black;background-color: white;}#sk-container-id-14 pre{padding: 0;}#sk-container-id-14 div.sk-toggleable {background-color: white;}#sk-container-id-14 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-14 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-14 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-14 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-14 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-14 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-14 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-14 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-14 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-14 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-14 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-14 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-14 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-14 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-14 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-14 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-14 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-14 div.sk-item {position: relative;z-index: 1;}#sk-container-id-14 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-14 div.sk-item::before, #sk-container-id-14 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-14 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-14 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-14 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-14 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-14 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-14 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-14 div.sk-label-container {text-align: center;}#sk-container-id-14 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-14 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-14\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=14, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" checked><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=14, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=14, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-15 {color: black;background-color: white;}#sk-container-id-15 pre{padding: 0;}#sk-container-id-15 div.sk-toggleable {background-color: white;}#sk-container-id-15 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-15 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-15 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-15 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-15 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-15 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-15 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-15 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-15 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-15 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-15 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-15 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-15 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-15 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-15 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-15 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-15 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-15 div.sk-item {position: relative;z-index: 1;}#sk-container-id-15 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-15 div.sk-item::before, #sk-container-id-15 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-15 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-15 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-15 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-15 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-15 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-15 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-15 div.sk-label-container {text-align: center;}#sk-container-id-15 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-15 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-15\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=15, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" checked><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=15, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=15, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-16 {color: black;background-color: white;}#sk-container-id-16 pre{padding: 0;}#sk-container-id-16 div.sk-toggleable {background-color: white;}#sk-container-id-16 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-16 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-16 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-16 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-16 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-16 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-16 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-16 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-16 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-16 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-16 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-16 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-16 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-16 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-16 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-16 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-16 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-16 div.sk-item {position: relative;z-index: 1;}#sk-container-id-16 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-16 div.sk-item::before, #sk-container-id-16 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-16 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-16 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-16 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-16 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-16 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-16 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-16 div.sk-label-container {text-align: center;}#sk-container-id-16 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-16 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-16\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=16, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" checked><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=16, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=16, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-17 {color: black;background-color: white;}#sk-container-id-17 pre{padding: 0;}#sk-container-id-17 div.sk-toggleable {background-color: white;}#sk-container-id-17 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-17 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-17 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-17 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-17 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-17 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-17 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-17 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-17 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-17 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-17 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-17 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-17 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-17 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-17 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-17 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-17 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-17 div.sk-item {position: relative;z-index: 1;}#sk-container-id-17 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-17 div.sk-item::before, #sk-container-id-17 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-17 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-17 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-17 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-17 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-17 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-17 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-17 div.sk-label-container {text-align: center;}#sk-container-id-17 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-17 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-17\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=17, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" checked><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=17, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=17, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-18 {color: black;background-color: white;}#sk-container-id-18 pre{padding: 0;}#sk-container-id-18 div.sk-toggleable {background-color: white;}#sk-container-id-18 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-18 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-18 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-18 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-18 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-18 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-18 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-18 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-18 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-18 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-18 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-18 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-18 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-18 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-18 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-18 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-18 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-18 div.sk-item {position: relative;z-index: 1;}#sk-container-id-18 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-18 div.sk-item::before, #sk-container-id-18 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-18 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-18 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-18 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-18 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-18 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-18 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-18 div.sk-label-container {text-align: center;}#sk-container-id-18 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-18 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-18\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=18, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" checked><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=18, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=18, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-19 {color: black;background-color: white;}#sk-container-id-19 pre{padding: 0;}#sk-container-id-19 div.sk-toggleable {background-color: white;}#sk-container-id-19 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-19 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-19 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-19 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-19 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-19 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-19 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-19 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-19 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-19 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-19 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-19 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-19 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-19 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-19 div.sk-item {position: relative;z-index: 1;}#sk-container-id-19 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-19 div.sk-item::before, #sk-container-id-19 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-19 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-19 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-19 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-19 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-19 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-19 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-19 div.sk-label-container {text-align: center;}#sk-container-id-19 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-19 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-19\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=19, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" checked><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=19, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=19, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-20 {color: black;background-color: white;}#sk-container-id-20 pre{padding: 0;}#sk-container-id-20 div.sk-toggleable {background-color: white;}#sk-container-id-20 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-20 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-20 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-20 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-20 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-20 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-20 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-20 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-20 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-20 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-20 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-20 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-20 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-20 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-20 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-20 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-20 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-20 div.sk-item {position: relative;z-index: 1;}#sk-container-id-20 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-20 div.sk-item::before, #sk-container-id-20 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-20 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-20 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-20 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-20 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-20 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-20 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-20 div.sk-label-container {text-align: center;}#sk-container-id-20 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-20 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-20\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=20, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" checked><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=20, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=20, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-21 {color: black;background-color: white;}#sk-container-id-21 pre{padding: 0;}#sk-container-id-21 div.sk-toggleable {background-color: white;}#sk-container-id-21 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-21 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-21 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-21 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-21 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-21 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-21 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-21 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-21 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-21 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-21 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-21 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-21 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-21 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-21 div.sk-item {position: relative;z-index: 1;}#sk-container-id-21 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-21 div.sk-item::before, #sk-container-id-21 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-21 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-21 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-21 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-21 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-21 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-21 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-21 div.sk-label-container {text-align: center;}#sk-container-id-21 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-21 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-21\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=21, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-21\" type=\"checkbox\" checked><label for=\"sk-estimator-id-21\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=21, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=21, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-22 {color: black;background-color: white;}#sk-container-id-22 pre{padding: 0;}#sk-container-id-22 div.sk-toggleable {background-color: white;}#sk-container-id-22 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-22 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-22 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-22 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-22 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-22 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-22 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-22 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-22 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-22 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-22 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-22 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-22 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-22 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-22 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-22 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-22 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-22 div.sk-item {position: relative;z-index: 1;}#sk-container-id-22 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-22 div.sk-item::before, #sk-container-id-22 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-22 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-22 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-22 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-22 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-22 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-22 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-22 div.sk-label-container {text-align: center;}#sk-container-id-22 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-22 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-22\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=22, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-22\" type=\"checkbox\" checked><label for=\"sk-estimator-id-22\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=22, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=22, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-23 {color: black;background-color: white;}#sk-container-id-23 pre{padding: 0;}#sk-container-id-23 div.sk-toggleable {background-color: white;}#sk-container-id-23 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-23 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-23 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-23 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-23 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-23 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-23 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-23 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-23 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-23 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-23 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-23 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-23 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-23 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-23 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-23 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-23 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-23 div.sk-item {position: relative;z-index: 1;}#sk-container-id-23 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-23 div.sk-item::before, #sk-container-id-23 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-23 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-23 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-23 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-23 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-23 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-23 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-23 div.sk-label-container {text-align: center;}#sk-container-id-23 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-23 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-23\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=23, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-23\" type=\"checkbox\" checked><label for=\"sk-estimator-id-23\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=23, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=23, random_state=42)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x23894c16d10>]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Number of Clusters')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Distortion')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Elbow Curve')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.lines.Line2D at 0x23894c36550>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x238905c1c50>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected Number of Clusters: 22\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.cluster import KMeans\n",
    "\n",
    "# Assuming your preprocessed DataFrame is named df\n",
    "\n",
    "# Remove any non-numeric columns if present\n",
    "df_numeric = df_without_id.select_dtypes(include='number')\n",
    "\n",
    "# Determine the range of cluster numbers to consider\n",
    "max_clusters = 23  # 23 Maximum number of clusters to consider\n",
    "\n",
    "# Run K-means clustering and calculate distortions\n",
    "distortions = []\n",
    "for i in range(1, max_clusters+1):\n",
    "    kmeans = KMeans(n_clusters=i, random_state=42)\n",
    "    kmeans.fit(df_numeric)\n",
    "    distortions.append(kmeans.inertia_)\n",
    "\n",
    "# Calculate the differences in distortions\n",
    "differences = [distortions[i] - distortions[i-1] for i in range(1, len(distortions))]\n",
    "\n",
    "# Find the cluster number with the significant change in distortion\n",
    "elbow_index = differences.index(max(differences)) + 1\n",
    "elbow_cluster_num = elbow_index + 1\n",
    "\n",
    "# Plot the distortions and mark the elbow point\n",
    "plt.plot(range(1, max_clusters+1), distortions, marker='o')\n",
    "plt.xlabel('Number of Clusters')\n",
    "plt.ylabel('Distortion')\n",
    "plt.title('Elbow Curve')\n",
    "plt.axvline(x=elbow_cluster_num, color='r', linestyle='--', label='Elbow Point')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# Use the cluster number at the elbow point for further analysis\n",
    "print(\"Selected Number of Clusters:\", elbow_cluster_num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "d83b9a48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x23894ccf5d0>]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Number of Clusters')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Distortion')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Elbow Curve')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.lines.Line2D at 0x23894c45890>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x2389c242d90>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected Number of Clusters: 22\n"
     ]
    }
   ],
   "source": [
    "# Plot the distortions and mark the elbow point\n",
    "plt.plot(range(1, max_clusters+1), distortions, marker='o')\n",
    "plt.xlabel('Number of Clusters')\n",
    "plt.ylabel('Distortion')\n",
    "plt.title('Elbow Curve')\n",
    "plt.axvline(x=elbow_cluster_num, color='r', linestyle='--', label='Elbow Point')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# Use the cluster number at the elbow point for further analysis\n",
    "print(\"Selected Number of Clusters:\", elbow_cluster_num)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4306643",
   "metadata": {},
   "source": [
    "### Applying PCA before visualizing the K-means clusters reduces dimensionality and enhances interpretability, facilitating a clearer understanding of the cluster structure in a lower-dimensional space."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "03b9493a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "# Assuming your preprocessed DataFrame is named df\n",
    "\n",
    "# Remove any non-numeric columns if present\n",
    "df_numeric = df_without_id.select_dtypes(include='number')\n",
    "\n",
    "# Apply dimensionality reduction using Principal Component Analysis (PCA)\n",
    "pca = PCA(n_components=25)\n",
    "df_pca = pca.fit_transform(df_numeric)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f0ac910",
   "metadata": {},
   "source": [
    "The scree plot will show a line plot where the x-axis represents the number of components, and the y-axis represents the explained variance ratio. Look for the \"elbow\" point in the plot, where the explained variance ratio levels off. This point indicates diminishing returns in terms of capturing additional variability."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "627d71b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Explained Variance Ratio for Principal Component 1: 0.2223038089905536\n",
      "Explained Variance Ratio for Principal Component 2: 0.1475275568401803\n",
      "Explained Variance Ratio for Principal Component 3: 0.1130092093360886\n",
      "Explained Variance Ratio for Principal Component 4: 0.07151720345791736\n",
      "Explained Variance Ratio for Principal Component 5: 0.06426860707160997\n",
      "Explained Variance Ratio for Principal Component 6: 0.05456386991053788\n",
      "Explained Variance Ratio for Principal Component 7: 0.042864863469087244\n",
      "Explained Variance Ratio for Principal Component 8: 0.038077306086437335\n",
      "Explained Variance Ratio for Principal Component 9: 0.036052498014322414\n",
      "Explained Variance Ratio for Principal Component 10: 0.029585583320118014\n",
      "Explained Variance Ratio for Principal Component 11: 0.024550629022956974\n",
      "Explained Variance Ratio for Principal Component 12: 0.023296102415099055\n",
      "Explained Variance Ratio for Principal Component 13: 0.018618232049392457\n",
      "Explained Variance Ratio for Principal Component 14: 0.016931261683402497\n",
      "Explained Variance Ratio for Principal Component 15: 0.016722288288910665\n",
      "Explained Variance Ratio for Principal Component 16: 0.016148776389679657\n",
      "Explained Variance Ratio for Principal Component 17: 0.015755073294928847\n",
      "Explained Variance Ratio for Principal Component 18: 0.014712060916452153\n",
      "Explained Variance Ratio for Principal Component 19: 0.010716538830717347\n",
      "Explained Variance Ratio for Principal Component 20: 0.008840156782614848\n",
      "Explained Variance Ratio for Principal Component 21: 0.006359116110734535\n",
      "Explained Variance Ratio for Principal Component 22: 0.003248685134090835\n",
      "Explained Variance Ratio for Principal Component 23: 0.0030114827598740025\n",
      "Explained Variance Ratio for Principal Component 24: 0.0013190898242934326\n",
      "Explained Variance Ratio for Principal Component 25: 1.1960375117020751e-33\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<BarContainer object of 25 artists>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Principal Component')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Explained Variance Ratio')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Explained Variance Ratio per Principal Component')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate the explained variance ratio\n",
    "explained_var = pca.explained_variance_ratio_\n",
    "\n",
    "# Print the explained variance ratio for each principal component\n",
    "for i, ratio in enumerate(explained_var):\n",
    "    print(f\"Explained Variance Ratio for Principal Component {i+1}: {ratio}\")\n",
    "\n",
    "# Plot the explained variance ratio\n",
    "plt.bar(range(len(explained_var)), explained_var)\n",
    "plt.xlabel('Principal Component')\n",
    "plt.ylabel('Explained Variance Ratio')\n",
    "plt.title('Explained Variance Ratio per Principal Component')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "cd63770f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Redo the amount of PCA n_compoents based on where it levels off. \n",
    "pca = PCA(n_components=9) #standard is 2\n",
    "df_pca = pca.fit_transform(df_numeric)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "4484b048",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Apply K-means clustering algorithm\n",
    "kmeans = KMeans(n_clusters=15, random_state=42)\n",
    "cluster_labels = kmeans.fit_predict(df_pca)\n",
    "\n",
    "# Add the cluster labels to the DataFrame\n",
    "df_without_id['Cluster'] = cluster_labels"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f81efebf",
   "metadata": {},
   "source": [
    "### Adding the ID column back into the dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "7f262afa",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.concat([df['ID'], df_without_id], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "33892085",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Flight Distance</th>\n",
       "      <th>Departure Delay</th>\n",
       "      <th>Arrival Delay</th>\n",
       "      <th>Departure and Arrival Time Convenience</th>\n",
       "      <th>Ease of Online Booking</th>\n",
       "      <th>Check-in Service</th>\n",
       "      <th>Online Boarding</th>\n",
       "      <th>Gate Location</th>\n",
       "      <th>On-board Service</th>\n",
       "      <th>Seat Comfort</th>\n",
       "      <th>Leg Room Service</th>\n",
       "      <th>Cleanliness</th>\n",
       "      <th>Food and Drink</th>\n",
       "      <th>In-flight Service</th>\n",
       "      <th>In-flight Wifi Service</th>\n",
       "      <th>In-flight Entertainment</th>\n",
       "      <th>Baggage Handling</th>\n",
       "      <th>Gender_Female</th>\n",
       "      <th>Gender_Male</th>\n",
       "      <th>Customer Type_First-time</th>\n",
       "      <th>Customer Type_Returning</th>\n",
       "      <th>Type of Travel_Business</th>\n",
       "      <th>Type of Travel_Personal</th>\n",
       "      <th>Class_Business</th>\n",
       "      <th>Class_Economy</th>\n",
       "      <th>Class_Economy Plus</th>\n",
       "      <th>Satisfaction_Neutral or Dissatisfied</th>\n",
       "      <th>Satisfaction_Satisfied</th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.566960</td>\n",
       "      <td>-0.370261</td>\n",
       "      <td>-0.333948</td>\n",
       "      <td>-0.262578</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>-0.292868</td>\n",
       "      <td>-0.370261</td>\n",
       "      <td>0.296454</td>\n",
       "      <td>0.622108</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.103976</td>\n",
       "      <td>-0.338179</td>\n",
       "      <td>-0.386481</td>\n",
       "      <td>-0.392678</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0.699242</td>\n",
       "      <td>0.716512</td>\n",
       "      <td>-0.386481</td>\n",
       "      <td>-0.392678</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.633101</td>\n",
       "      <td>2.285515</td>\n",
       "      <td>-0.386481</td>\n",
       "      <td>-0.366658</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID       Age  Flight Distance  Departure Delay  Arrival Delay  \\\n",
       "0   1  0.566960        -0.370261        -0.333948      -0.262578   \n",
       "1   2 -0.292868        -0.370261         0.296454       0.622108   \n",
       "2   3  0.103976        -0.338179        -0.386481      -0.392678   \n",
       "3   4  0.699242         0.716512        -0.386481      -0.392678   \n",
       "4   5  0.633101         2.285515        -0.386481      -0.366658   \n",
       "\n",
       "   Departure and Arrival Time Convenience  Ease of Online Booking  \\\n",
       "0                                       3                       3   \n",
       "1                                       2                       2   \n",
       "2                                       4                       4   \n",
       "3                                       2                       2   \n",
       "4                                       3                       3   \n",
       "\n",
       "   Check-in Service  Online Boarding  Gate Location  On-board Service  \\\n",
       "0                 4                3              3                 3   \n",
       "1                 3                5              2                 5   \n",
       "2                 4                5              4                 3   \n",
       "3                 3                4              2                 5   \n",
       "4                 3                5              3                 3   \n",
       "\n",
       "   Seat Comfort  Leg Room Service  Cleanliness  Food and Drink  \\\n",
       "0             5                 2            5               5   \n",
       "1             4                 5            5               3   \n",
       "2             5                 3            5               5   \n",
       "3             5                 5            4               4   \n",
       "4             4                 4            5               4   \n",
       "\n",
       "   In-flight Service  In-flight Wifi Service  In-flight Entertainment  \\\n",
       "0                  5                       3                        5   \n",
       "1                  5                       2                        5   \n",
       "2                  3                       4                        3   \n",
       "3                  5                       2                        5   \n",
       "4                  3                       3                        3   \n",
       "\n",
       "   Baggage Handling  Gender_Female  Gender_Male  Customer Type_First-time  \\\n",
       "0                 5              0            1                         1   \n",
       "1                 5              1            0                         0   \n",
       "2                 3              0            1                         0   \n",
       "3                 5              0            1                         0   \n",
       "4                 3              1            0                         0   \n",
       "\n",
       "   Customer Type_Returning  Type of Travel_Business  Type of Travel_Personal  \\\n",
       "0                        0                        1                        0   \n",
       "1                        1                        1                        0   \n",
       "2                        1                        1                        0   \n",
       "3                        1                        1                        0   \n",
       "4                        1                        1                        0   \n",
       "\n",
       "   Class_Business  Class_Economy  Class_Economy Plus  \\\n",
       "0               1              0                   0   \n",
       "1               1              0                   0   \n",
       "2               1              0                   0   \n",
       "3               1              0                   0   \n",
       "4               1              0                   0   \n",
       "\n",
       "   Satisfaction_Neutral or Dissatisfied  Satisfaction_Satisfied  Cluster  \n",
       "0                                     1                       0       14  \n",
       "1                                     0                       1        8  \n",
       "2                                     0                       1        0  \n",
       "3                                     0                       1        8  \n",
       "4                                     0                       1        8  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7322e001",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Cluster\n",
       "0       14\n",
       "1        8\n",
       "2        0\n",
       "3        8\n",
       "4        8"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get the last column into its own DataFrame\n",
    "df_with_cluster = df[['Cluster']]\n",
    "df_with_cluster.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "bb4cf618",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Customer Type</th>\n",
       "      <th>Type of Travel</th>\n",
       "      <th>Class</th>\n",
       "      <th>Flight Distance</th>\n",
       "      <th>Departure Delay</th>\n",
       "      <th>Arrival Delay</th>\n",
       "      <th>Departure and Arrival Time Convenience</th>\n",
       "      <th>Ease of Online Booking</th>\n",
       "      <th>Check-in Service</th>\n",
       "      <th>Online Boarding</th>\n",
       "      <th>Gate Location</th>\n",
       "      <th>On-board Service</th>\n",
       "      <th>Seat Comfort</th>\n",
       "      <th>Leg Room Service</th>\n",
       "      <th>Cleanliness</th>\n",
       "      <th>Food and Drink</th>\n",
       "      <th>In-flight Service</th>\n",
       "      <th>In-flight Wifi Service</th>\n",
       "      <th>In-flight Entertainment</th>\n",
       "      <th>Baggage Handling</th>\n",
       "      <th>Satisfaction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Male</td>\n",
       "      <td>48</td>\n",
       "      <td>First-time</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business</td>\n",
       "      <td>821</td>\n",
       "      <td>2</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>Neutral or Dissatisfied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Female</td>\n",
       "      <td>35</td>\n",
       "      <td>Returning</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business</td>\n",
       "      <td>821</td>\n",
       "      <td>26</td>\n",
       "      <td>39.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>Satisfied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Male</td>\n",
       "      <td>41</td>\n",
       "      <td>Returning</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business</td>\n",
       "      <td>853</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>Satisfied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Male</td>\n",
       "      <td>50</td>\n",
       "      <td>Returning</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business</td>\n",
       "      <td>1905</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>Satisfied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Female</td>\n",
       "      <td>49</td>\n",
       "      <td>Returning</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business</td>\n",
       "      <td>3470</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>Satisfied</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID  Gender  Age Customer Type Type of Travel     Class  Flight Distance  \\\n",
       "0   1    Male   48    First-time       Business  Business              821   \n",
       "1   2  Female   35     Returning       Business  Business              821   \n",
       "2   3    Male   41     Returning       Business  Business              853   \n",
       "3   4    Male   50     Returning       Business  Business             1905   \n",
       "4   5  Female   49     Returning       Business  Business             3470   \n",
       "\n",
       "   Departure Delay  Arrival Delay  Departure and Arrival Time Convenience  \\\n",
       "0                2            5.0                                       3   \n",
       "1               26           39.0                                       2   \n",
       "2                0            0.0                                       4   \n",
       "3                0            0.0                                       2   \n",
       "4                0            1.0                                       3   \n",
       "\n",
       "   Ease of Online Booking  Check-in Service  Online Boarding  Gate Location  \\\n",
       "0                       3                 4                3              3   \n",
       "1                       2                 3                5              2   \n",
       "2                       4                 4                5              4   \n",
       "3                       2                 3                4              2   \n",
       "4                       3                 3                5              3   \n",
       "\n",
       "   On-board Service  Seat Comfort  Leg Room Service  Cleanliness  \\\n",
       "0                 3             5                 2            5   \n",
       "1                 5             4                 5            5   \n",
       "2                 3             5                 3            5   \n",
       "3                 5             5                 5            4   \n",
       "4                 3             4                 4            5   \n",
       "\n",
       "   Food and Drink  In-flight Service  In-flight Wifi Service  \\\n",
       "0               5                  5                       3   \n",
       "1               3                  5                       2   \n",
       "2               5                  3                       4   \n",
       "3               4                  5                       2   \n",
       "4               4                  3                       3   \n",
       "\n",
       "   In-flight Entertainment  Baggage Handling             Satisfaction  \n",
       "0                        5                 5  Neutral or Dissatisfied  \n",
       "1                        5                 5                Satisfied  \n",
       "2                        3                 3                Satisfied  \n",
       "3                        5                 5                Satisfied  \n",
       "4                        3                 3                Satisfied  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "0ef8fbdd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add the last column DataFrame back to the original DataFrame\n",
    "df_with_cluster = pd.concat([df_with_cluster,df2], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "bd6942d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cluster</th>\n",
       "      <th>ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Customer Type</th>\n",
       "      <th>Type of Travel</th>\n",
       "      <th>Class</th>\n",
       "      <th>Flight Distance</th>\n",
       "      <th>Departure Delay</th>\n",
       "      <th>Arrival Delay</th>\n",
       "      <th>Departure and Arrival Time Convenience</th>\n",
       "      <th>Ease of Online Booking</th>\n",
       "      <th>Check-in Service</th>\n",
       "      <th>Online Boarding</th>\n",
       "      <th>Gate Location</th>\n",
       "      <th>On-board Service</th>\n",
       "      <th>Seat Comfort</th>\n",
       "      <th>Leg Room Service</th>\n",
       "      <th>Cleanliness</th>\n",
       "      <th>Food and Drink</th>\n",
       "      <th>In-flight Service</th>\n",
       "      <th>In-flight Wifi Service</th>\n",
       "      <th>In-flight Entertainment</th>\n",
       "      <th>Baggage Handling</th>\n",
       "      <th>Satisfaction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>Male</td>\n",
       "      <td>48</td>\n",
       "      <td>First-time</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business</td>\n",
       "      <td>821</td>\n",
       "      <td>2</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>Neutral or Dissatisfied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>Female</td>\n",
       "      <td>35</td>\n",
       "      <td>Returning</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business</td>\n",
       "      <td>821</td>\n",
       "      <td>26</td>\n",
       "      <td>39.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>Satisfied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Male</td>\n",
       "      <td>41</td>\n",
       "      <td>Returning</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business</td>\n",
       "      <td>853</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>Satisfied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>Male</td>\n",
       "      <td>50</td>\n",
       "      <td>Returning</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business</td>\n",
       "      <td>1905</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>Satisfied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>Female</td>\n",
       "      <td>49</td>\n",
       "      <td>Returning</td>\n",
       "      <td>Business</td>\n",
       "      <td>Business</td>\n",
       "      <td>3470</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>Satisfied</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Cluster  ID  Gender  Age Customer Type Type of Travel     Class  \\\n",
       "0       14   1    Male   48    First-time       Business  Business   \n",
       "1        8   2  Female   35     Returning       Business  Business   \n",
       "2        0   3    Male   41     Returning       Business  Business   \n",
       "3        8   4    Male   50     Returning       Business  Business   \n",
       "4        8   5  Female   49     Returning       Business  Business   \n",
       "\n",
       "   Flight Distance  Departure Delay  Arrival Delay  \\\n",
       "0              821                2            5.0   \n",
       "1              821               26           39.0   \n",
       "2              853                0            0.0   \n",
       "3             1905                0            0.0   \n",
       "4             3470                0            1.0   \n",
       "\n",
       "   Departure and Arrival Time Convenience  Ease of Online Booking  \\\n",
       "0                                       3                       3   \n",
       "1                                       2                       2   \n",
       "2                                       4                       4   \n",
       "3                                       2                       2   \n",
       "4                                       3                       3   \n",
       "\n",
       "   Check-in Service  Online Boarding  Gate Location  On-board Service  \\\n",
       "0                 4                3              3                 3   \n",
       "1                 3                5              2                 5   \n",
       "2                 4                5              4                 3   \n",
       "3                 3                4              2                 5   \n",
       "4                 3                5              3                 3   \n",
       "\n",
       "   Seat Comfort  Leg Room Service  Cleanliness  Food and Drink  \\\n",
       "0             5                 2            5               5   \n",
       "1             4                 5            5               3   \n",
       "2             5                 3            5               5   \n",
       "3             5                 5            4               4   \n",
       "4             4                 4            5               4   \n",
       "\n",
       "   In-flight Service  In-flight Wifi Service  In-flight Entertainment  \\\n",
       "0                  5                       3                        5   \n",
       "1                  5                       2                        5   \n",
       "2                  3                       4                        3   \n",
       "3                  5                       2                        5   \n",
       "4                  3                       3                        3   \n",
       "\n",
       "   Baggage Handling             Satisfaction  \n",
       "0                 5  Neutral or Dissatisfied  \n",
       "1                 5                Satisfied  \n",
       "2                 3                Satisfied  \n",
       "3                 5                Satisfied  \n",
       "4                 3                Satisfied  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_with_cluster.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0be99f49",
   "metadata": {},
   "source": [
    "### Visualizing the cluster distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "c85c4106",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<BarContainer object of 15 artists>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Cluster')"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Count')"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Cluster Distribution')"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Assuming your DataFrame is named df\n",
    "cluster_counts = df['Cluster'].value_counts()\n",
    "\n",
    "# Generate the bar chart\n",
    "plt.bar(cluster_counts.index, cluster_counts.values)\n",
    "plt.xlabel('Cluster')\n",
    "plt.ylabel('Count')\n",
    "plt.title('Cluster Distribution')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70774e98",
   "metadata": {},
   "source": [
    "### Manually viewing the centroids"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a29ed7fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.68120118,  0.35343497,  2.18071   , -0.08163005, -0.15330394,\n",
       "        -0.99340825, -0.98761429,  0.03473418, -0.17097323],\n",
       "       [-1.21470639,  3.36822577, -0.68597247, -1.32597612, -0.13152809,\n",
       "         0.61339495,  0.49248526,  0.16900285,  0.03495488],\n",
       "       [ 2.77363786,  0.69695248,  2.90244076, -0.83356761, -0.30671086,\n",
       "         1.3395625 ,  0.53847567,  0.23935936, -0.10625573],\n",
       "       [-0.03235933, -2.16503001,  2.16388088, -0.12246497, -0.19300944,\n",
       "         0.49637072,  0.48834551, -0.29012607, -0.05267578],\n",
       "       [ 1.52417834, -2.51234743, -2.13857219, -1.11380233, -0.37847775,\n",
       "         0.47738372, -1.27415887,  0.07175261, -0.19876558],\n",
       "       [ 1.31262673,  0.62816313,  0.32642846, -0.74626136, -0.12838947,\n",
       "        -1.04251645, -0.34233221,  0.21697245, -0.16973606],\n",
       "       [ 0.8010321 ,  2.70612522,  0.91948788,  1.86760572, -0.02875648,\n",
       "        -1.13964522, -0.04465635, -0.81499391,  0.54712614],\n",
       "       [ 3.19097948, -2.24989499,  0.1334715 ,  0.04030399, -0.11805808,\n",
       "        -0.35673992,  0.5206624 ,  0.0711896 ,  0.14258833],\n",
       "       [-2.71690258,  1.11212045, -1.13455546, -0.76807493, -0.10076678,\n",
       "         0.10512922,  0.40216754,  0.02895448,  0.06076117],\n",
       "       [ 0.54617892, -0.21409102,  0.10049718, -0.16341613,  6.82514115,\n",
       "         0.39215537, -0.27458723,  0.13233739, -0.00740678],\n",
       "       [ 4.32667317,  0.65983216, -1.38053386, -0.44203795, -0.12699224,\n",
       "        -0.51283334, -0.07725081, -0.44893274,  0.40446061],\n",
       "       [-0.93505724, -1.68130868, -1.16516888,  0.21786129, -0.14230226,\n",
       "        -0.65656843, -0.04464786,  0.28943405, -0.23630081],\n",
       "       [ 2.40058152, -0.12097396, -2.22592462,  1.88565608, -0.22811337,\n",
       "         1.00932166,  0.03250954,  0.01095069, -0.3948967 ],\n",
       "       [-3.7708929 , -2.02592633, -0.27102058, -0.02819052, -0.07798946,\n",
       "         0.02065266,  0.35945847, -0.2127068 ,  0.37819184],\n",
       "       [-1.25087553,  0.91603298, -0.00806963,  2.47520546, -0.18193135,\n",
       "         0.7944242 , -0.40653729,  0.54411202, -0.44802573]])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "centroids = kmeans.cluster_centers_\n",
    "centroids\n",
    "\n",
    "# The centroids array provides you with the average values for each feature/column within each cluster. \n",
    "# These centroid values represent the central points or representatives of the clusters in the feature space."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12997ef1",
   "metadata": {},
   "source": [
    "### Visualize the clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "4c040edb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x2389ea4a350>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Principal Component 1')"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Principal Component 2')"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'K-Means Clustering')"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x2389ea59dd0>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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e+9l06ZNgz5Xe5rsdM+nPvUpHnnkEXbu3Fnyths2bGDt2rV85jOfAXI/u4997GM0Njaybt26nG0uueSSksevq6vj6KOPzlk2e/bsnCm6hQsXMmvWLGbOnJmz3hVXXFHyfiwsLIYHS7BYHHD85Cc/4aabbuKBBx7gyiuvzBEtdrs953XvvffmHeNzn/scy5Yt42c/+xmtra1ce+21eddrbm4GzBvzrmM//PDDOVM9n/70p/njH//I9ddfz4IFC3jvvfdYvHgx1dXVeQNcKysrc/52Op0APetOnjyZl156iZqaGm644QYmT57M5MmTueOOO4qen3HjxgGwefPmousNByeffDJPPPFEj6gbM2YMs2bN4sEHHxxw2+y5/c53vtPv3H7lK18B6DeVNphMoF3PL5jnuO9n0d7eTm1tbb/18i2zsLDYs1hZQhYHJLfeeitCCG699VYMw+D+++/HZrOxePHinPUmTpyYd/sTTjiB6dOnc9ttt3HmmWcyduzYvOtVVVUB8NhjjzF+/PiC9nR3d/PMM89w880384Mf/KBneTKZpKOjY7CH18NJJ53ESSedhK7rLFmyhD/84Q9885vfpLa2lssvvzzvNqeeeip2u50nnniCL33pS7u1X5fLRTKZ7Lc8XyzOhRdeyIUXXkgymeSdd97h5z//OZ/+9KeZMGECxx13XMF9ZM/tjTfeyMUXX5x3nenTp+f8Pdw1ciorK3uEU1+ampqGdT8WFhYDYwkWiwOWW265BUVRuPnmm5FS8sADDzBv3rySt//xj3/MY489xg033FBwnbPPPhubzcbGjRuLTkcIIZBS9nhJsvztb3/rN221O6iqyjHHHMOMGTO4//77WbZsWUHBUldXx/XXX98TRJovU2jjxo1Eo9GCmUITJkygpaWF5ubmHm9DKpViwYIFBW10Op2ccsoplJWVsWDBApYvX85xxx3Xz3OUZfr06UydOpWVK1dy++23l3QehptTTjmF3/zmN6xevTpnWuihhx4aEXssLA5mLMFicUBz0003oSgKP/nJT5BS8uCDD2Kzlfa1v/LKK3OycvIxYcIEbrvtNn70ox+xadMmzjnnHMrLy2lubua9997D6/Vy6623EggEOPnkk/n1r39NVVUVEyZMYOHChfz973+nrKxst47tz3/+M6+88grnnXce48aNI5FI9KRjn3HGGUW3/e1vf8umTZu49tprWbBgARdddBG1tbW0tbXx4osvcvfdd/PQQw8VFCyXXXYZN910E5dffjnf/e53SSQS/P73v+8nvm666SZ27NjB6aefzpgxY+jq6uKOO+7AbrdzyimnAObUltvt5v777+eQQw7B5/NRX19PfX09/+///T/OPfdczj77bK699lpGjx5NR0cHa9asYdmyZTz66KO7de5K5Zvf/CZ33XUX5557Lrfddhu1tbU88MADrF27FgBFsWbVLSz2FtavzeKA58c//jE/+9nPeOyxx7jsssvQNG1Yx7/xxht57LHHWL9+Pddccw1nn3023/ve99i6dSsnn3xyz3oPPPAAp556Kt/73ve4+OKLWbJkCS+++GLB2i4DMXfuXNLpNDfffDPnnnsuV111Fa2trTz11FOcddZZRbd1uVw8++yz3HPPPTQ1NfHFL36R0047jS9+8Yts2bKFu+66i/PPP7/g9hMnTuTJJ5+kq6uLT37yk3z3u9/l0ksv7eetOeaYY2hqauL73/8+Z511Fl/4whdwu9288sorHHrooQB4PB7uuusu2tvbOeusszjqqKP4y1/+ApjTV++99x5lZWV885vf5IwzzuDLX/4yL7300oCibDior69n4cKFTJs2jS996Ut85jOfweFwcNtttwHstti0sLAYPELmS5OwsLCwsCjIF77wBR588EHa29txOBwjbY6FxUGBNSVkYWFhUYTbbruN+vp6Jk2aRCQS4ZlnnuFvf/sbP/7xjy2xYmGxF7EEi4WFhUUR7HY7v/71r9mxYwfpdJqpU6fy29/+lm984xsjbZqFxUGFNSVkYWFhYWFhsc9jBd1aWFhYWFgcZLz++uucf/751NfXI4TgiSeeKLjuF7/4RYQQ/O53v9tr9uXDEiwWFhYWFhYHGdFolDlz5vDHP/6x6HpPPPEE7777LvX19XvJssJYMSwWFhYWFhYHGeeeey7nnntu0XV27tzJV7/6VRYsWMB55523lywrzEElWAzDoKGhAb/fP+wlvC0sLCwsDiyklITDYerr6/dYkcBEIkEqlRqWsaSU/e5tTqezX4XtUjAMg6uuuorvfve7PTWTRpqDSrA0NDQU7AljYWFhYWGRj+3btzNmzJhhHzeRSDBxvI+mlqG35wCz03wkEslZdvPNN3PLLbcMeqxf/vKX2Gw2vv71rw+LbcPBQSVY/H4/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deTm5vK1r31tpMVTDAapOOzE43E5YcIE+fvf/36kRRk2nnnmGTlz5ky5YcMGCcjVq1ePtEjDwo9//GM5adKkkRajT0488UR54403dtk2c+ZM+W//9m8jJNHwUFtbKwH52muvjbQog6KtrU1OmzZNvvDCC3LZsmXya1/72kiLNGBuv/12ecopp4y0GMPCBRdcIK+//vou2z71qU/Jz372syMkkWKoKJfQEeCjjz7iwIEDaJrGwoULGT9+POeddx4bNmwYadEGxaFDh1ixYgV/+tOf8Hq9Iy3OsNLS0kJBQcFIi9ErsViMVatWcfbZZ3fZfvbZZ/P222+PkFTDQ0tLC8Covv598ZWvfIULLriAs846a6RFGTRPPfUUJ5xwApdffjklJSUsXLiQ3/3udyMt1qA45ZRTeOmll9i6dSsAa9eu5c033+T8888fYckUg0UpLEeAnTt3ArBy5Uq++93v8vTTT5Ofn8+yZctobGwcYekGhpSSz3/+89x4442ccMIJIy3OsLJjxw5+9atfjepeGvX19Zim2aOjamlpaY/Oq2MJKSW33norp5xyCnPnzh1pcQbMX/7yFz766CPuvvvukRZlSOzcuZN7772XadOm8dxzz3HjjTfy1a9+lT/+8Y8jLdqAuf3227n66quZOXMmDoeDhQsXcsstt3D11VePtGiKQaIUliGwcuVKhBB9vj788MN0kNd3vvMdPv3pT7No0SIefPBBhBD87W9/G+FZ2GQ7l1/96le0trby7W9/e6RF7pVs59KZgwcPcu6553L55ZfzhS98YYQkz57uLeRlhrbyY4mbbrqJdevW8fDDD4+0KANm3759fO1rX+O///u/j3jX3eHGsiyOP/547rrrLhYuXMiXvvQlVqxYwb333jvSog2YRx55hP/+7//mz3/+Mx999BEPPfQQ99xzDw899NBIi6YYJCrodgjcdNNNXHXVVX3uU1VVRVtbGwCzZ89Ob3e5XEyePJm9e/ceVhmzJdu53Hnnnbz77rs9+nKccMIJXHPNNaPiZpDtXFIcPHiQM844I92xdDRTVFSErus9rCm1tbU9rC5jhZtvvpmnnnqK119/nfLy8pEWZ8CsWrWK2tpaFi1alN5mmiavv/46//Vf/0U0GkXX9RGUMHvGjx/f5T4FMGvWLB599NERkmjwfPOb3+Tf/u3f0veC4447jj179nD3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",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df_pca[:, 0], df_pca[:, 1], c=cluster_labels)\n",
    "plt.xlabel('Principal Component 1')\n",
    "plt.ylabel('Principal Component 2')\n",
    "plt.title('K-Means Clustering')\n",
    "plt.colorbar(cmap='bwr', label='Cluster')\n",
    "\n",
    "# Define the field labels for each cluster\n",
    "#field_labels = ['Cluster 0', 'Cluster 1', 'Cluster 2', 'Cluster 3', 'Cluster 4', 'Cluster 5', 'Cluster 6', 'Cluster 7']\n",
    "\n",
    "# Add field labels to the cluster groupings\n",
    "#for i, label in enumerate(field_labels):\n",
    "#    cluster_points = df_pca[cluster_labels == i]\n",
    "#    centroid = cluster_points.mean(axis=0)\n",
    "#    plt.annotate(label, (centroid[0], centroid[1]), textcoords=\"offset points\",\n",
    "#                 xytext=(0,10), ha='center', color = 'White')\n",
    "\n",
    "plt.show()\n",
    "\n",
    "#issue with this scatter is that it's only on 2 axis (PCA 1 and PCA 2, we currently have 9 PCAs.)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30043e83",
   "metadata": {},
   "source": [
    "### Manually reviewing a cluster label of my choice"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "f6a24bb6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cluster</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.399519</td>\n",
       "      <td>-0.595837</td>\n",
       "      <td>0.668627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.709513</td>\n",
       "      <td>0.709494</td>\n",
       "      <td>1.136256</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.141666</td>\n",
       "      <td>-0.245944</td>\n",
       "      <td>1.083731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.110774</td>\n",
       "      <td>-0.254967</td>\n",
       "      <td>1.042226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.417249</td>\n",
       "      <td>-0.551724</td>\n",
       "      <td>0.542857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-0.186234</td>\n",
       "      <td>-0.525658</td>\n",
       "      <td>0.898606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>-0.468157</td>\n",
       "      <td>-0.597842</td>\n",
       "      <td>0.543332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>-0.148085</td>\n",
       "      <td>-0.463499</td>\n",
       "      <td>0.885933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.610503</td>\n",
       "      <td>0.550087</td>\n",
       "      <td>1.138147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>-0.013404</td>\n",
       "      <td>-0.342189</td>\n",
       "      <td>0.967542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>-0.273778</td>\n",
       "      <td>-0.517637</td>\n",
       "      <td>0.777568</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>-0.136591</td>\n",
       "      <td>-0.459489</td>\n",
       "      <td>0.912266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>-0.430567</td>\n",
       "      <td>-0.587816</td>\n",
       "      <td>0.582930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.532857</td>\n",
       "      <td>0.430783</td>\n",
       "      <td>1.131933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>-0.458747</td>\n",
       "      <td>-0.595837</td>\n",
       "      <td>0.531759</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             mean    median       std\n",
       "Cluster                              \n",
       "0       -0.399519 -0.595837  0.668627\n",
       "1        0.709513  0.709494  1.136256\n",
       "2        0.141666 -0.245944  1.083731\n",
       "3        0.110774 -0.254967  1.042226\n",
       "4       -0.417249 -0.551724  0.542857\n",
       "5       -0.186234 -0.525658  0.898606\n",
       "6       -0.468157 -0.597842  0.543332\n",
       "7       -0.148085 -0.463499  0.885933\n",
       "8        0.610503  0.550087  1.138147\n",
       "9       -0.013404 -0.342189  0.967542\n",
       "10      -0.273778 -0.517637  0.777568\n",
       "11      -0.136591 -0.459489  0.912266\n",
       "12      -0.430567 -0.587816  0.582930\n",
       "13       0.532857  0.430783  1.131933\n",
       "14      -0.458747 -0.595837  0.531759"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# I randomly selected Flight Distance, I could pick anything\n",
    "cluster_stats = df.groupby('Cluster')['Flight Distance'].agg(['mean', 'median', 'std'])\n",
    "cluster_stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "08191eb7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Cluster', ylabel='Flight Distance'>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Cluster')"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Flight Distance')"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Feature Distribution by Cluster')"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "sns.boxplot(x='Cluster', y='Flight Distance', data=df)\n",
    "plt.xlabel('Cluster')\n",
    "plt.ylabel('Flight Distance')\n",
    "plt.title('Feature Distribution by Cluster')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c9a97d8",
   "metadata": {},
   "source": [
    "### Exporting Cluster DF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "1b54ba18",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_with_cluster.to_csv('Cleaned DF\\Cluster_K-Means_DF.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bcfedaa9",
   "metadata": {},
   "source": [
    "### Exporting Cleaned DF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "f7446a17",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv('Cleaned DF\\Cleaned_K-Means_DF.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88bd26dc",
   "metadata": {},
   "source": [
    "# Done"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
